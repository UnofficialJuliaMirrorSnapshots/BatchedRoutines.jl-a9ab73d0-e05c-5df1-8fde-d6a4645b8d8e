using CUDAapi, Pkg

const config_path = joinpath(@__DIR__, "ext.jl")
const project_path = joinpath(dirname(@__DIR__), "Project.toml")

generated_script(attched; reload_env=false) =
if reload_env
"""
# autogenerated file, do not edit
import Pkg
ctx = Pkg.Types.Context()
pkgs = Pkg.Types.PackageSpec[]
Pkg.Operations.resolve_versions!(ctx, pkgs)
new_apply = Pkg.Operations.apply_versions(ctx, pkgs)
Pkg.Operations.write_env(ctx) # write env before building
$attched
"""
else
"""
# autogenerated file, do not edit
$attched
"""
end


function write_to_deps(pkgs...)
    project = Pkg.TOML.parsefile(project_path)

    for (pkg, uuid) in pkgs
        project["deps"][pkg] = uuid
    end

    open(project_path, "w") do f
        Pkg.TOML.print(f, project)
    end
end

function main()
    libcuda_path = find_cuda_library("cuda", find_toolkit())
    if libcuda_path === nothing
        open(config_path, "w") do io
            println(io, generated_script("const USE_CUDA = false"))
        end
    else
        open(config_path, "w") do io
            println(io, generated_script("const USE_CUDA = true"; reload_env=true))
        end

        @info "find CUDA, add CuArrays, GPUArrays as dependency"

        write_to_deps(
            "CuArrays" => "3a865a2d-5b23-5a0f-bc46-62713ec82fae",
            "GPUArrays" => "0c68f7d7-f131-5f86-a1c3-88cf8149b2d7"
            )
    end

    old_env = Base.active_project()
    # update env of the project
    Pkg.activate(dirname(@__DIR__))
    Pkg.resolve()
    Pkg.activate(dirname(old_env))
end

main()
